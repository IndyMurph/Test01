using System;
using System.Collections.Specialized;
using System.IO;
using System.ServiceProcess;
using System.Threading;
using System.Xml;
using System.Xml.Schema;

namespace PIAdaptMRP
{
    internal static class Setup
    {
        internal static BitVector32 DebugBitVector32;
        internal static int DailyLog = BitVector32.CreateMask(0);
        internal static int DailyLogInsert = BitVector32.CreateMask(DailyLog);
        internal static int DailyLogSelect = BitVector32.CreateMask(DailyLogInsert);
        internal static int Diagnostics = BitVector32.CreateMask(DailyLogSelect);
        internal static int HeartBeat = BitVector32.CreateMask(Diagnostics);
        internal static int HouseKeeping = BitVector32.CreateMask(HeartBeat);
        internal static int OleDBError = BitVector32.CreateMask(HouseKeeping);
        internal static int OracleError = BitVector32.CreateMask(OleDBError);
        internal static int Timing = BitVector32.CreateMask(OracleError);

        internal static BitVector32 PagerBitVector32;
        internal static int EmailAdmin = BitVector32.CreateMask(0);
        internal static int EmailDiag = BitVector32.CreateMask(EmailAdmin);

        internal static Int32 InitScanDays;
        internal static Int32 InitScanBatches;
        internal static Int32 NormalScanDays;
        internal static Int32 NormalScanBatches;
        internal static Int32 DebugLevel;
        internal static String EmailFromAddress;
        internal static String EmailServer;
        internal static Int32 LagTime;
        internal static String LogFileRootName;
        internal static Int32 MaxRestartAttempts;
        internal static String OracleDataSource;
        internal static String OraclePassword;
        internal static String OracleUserId;
        internal static Int32 PagerLevel;
        internal static String PiServer;
        internal static String PiToOracleDateTimeFormatModel;
        internal static String ListXmlFileName;
        internal static String ListXsdFileName;
        internal static Int32 RestartSleepTime;
        internal static Int32 ScanSleepTime;
        internal static String SetUpName;
        internal static Int32 Throttletime;

        internal static String SetUpXmlFileName;
        internal static String SetUpXsdFileName;
        internal static String SetUpServiceName;
        internal static bool ServiceStart;
        internal static bool XmlFileGood;

        /// <summary>
        ///     Validate XMLS setup content using XSD file
        /// </summary>
        /// <returns>True if XML setup file is valid</returns>
        internal static void ValidateSetupXml()
        {
            var sc = new ServiceController(PiAdaptMrp.RunningServiceNm);

            var setupHistoryLog = string.Format("{0}SetUpHistory.log", LogFileRootName);

            // Create the XmlSchemaSet class.
            var xmlSchemaSet = new XmlSchemaSet();

            // Add the schema to the collection.
            try
            {
                xmlSchemaSet.Add("PIAdapterMRPSetup", SetUpXsdFileName);
            }
            catch (Exception ex)
            {
                XmlFileGood = false;
                Logs.Msg(setupHistoryLog, ex.ToString());
            }

            // Error found: Log NOT Valid information to Daily and Diagnostics log files
            // Send issue to the Pager Admin and stop the service
            if (XmlFileGood == false)
            {
                var errMsg = string.Format("{0} Is NOT Valid as defined by {1}.{2}", SetUpXmlFileName, SetUpXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailAdmin, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} Is NOT Valid as defined by {1}.", SetUpXmlFileName, SetUpXsdFileName));
                Thread.Sleep(5000);
                sc.Stop();
            }

            // Set the validation settings.
            var settings = new XmlReaderSettings { ValidationType = ValidationType.Schema, Schemas = xmlSchemaSet };
            settings.ValidationEventHandler += XsdValidationCallBackSetup;

            // Create the XmlReader object.
            var reader = XmlReader.Create(SetUpXmlFileName, settings);

            // Parse the file. 
            try
            {
                while (reader.Read())
                {
                    // information generated by exception handler and ValidationEventHandler
                }
            }
            // Error found: Log error to history Log file and NOT Valid information to Daily and Diagnostics log files
            // Send issue to the Pager Admin and stop the service
            catch (Exception ex)
            {
                var errMsg = string.Format("{0} Is NOT Valid as defined by {1}.{2}", SetUpXmlFileName, SetUpXsdFileName, Environment.NewLine);
                Logs.Msg(setupHistoryLog, ex.ToString());
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailAdmin, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} Is NOT Valid as defined by {1}.", SetUpXmlFileName, SetUpXsdFileName));
                Thread.Sleep(5000);

                sc.Stop();
            }
            reader.Close();

            // Success : Log Valid status to Daily and Diagnostic log files
            // Send success info to the Pager Admin
            if (XmlFileGood)
            {
                var successMsg = string.Format("{0} Is Valid as defined by {1}.{2}", SetUpXmlFileName, SetUpXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", successMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", successMsg);
                Email.SendMsgToList(EmailAdmin, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} Is Valid as defined by {1}.", SetUpXmlFileName, SetUpXsdFileName));
            }
            // Error : Log Not Valid status to Daily and Diagnostic log files
            // Send issue to the Email Admin and stop the service
            else
            {
                var errMsg = string.Format("{0} Is NOT Valid as defined by {1}.{2}", SetUpXmlFileName, SetUpXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailAdmin, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} Is NOT Valid as defined by {1}.", SetUpXmlFileName, SetUpXsdFileName));
                Thread.Sleep(5000);
                sc.Stop();
            }
        }

        /// <summary>
        ///     Load the setup XML configuration parameters
        ///     Note:  Log fatal errors to logs in C:\TEMP
        /// </summary>
        /// <returns>Setup data</returns>
        internal static void LoadConfig()
        {
            var sc = new ServiceController(PiAdaptMrp.RunningServiceNm);
            String msgString;

            try
            {
                using (var setupreader = XmlReader.Create(SetUpXmlFileName))
                {
                    // Parse the XML document.  ReadString is used to 
                    // read the text content of the elements.
                    setupreader.Read();
                    while (setupreader.ReadToFollowing("SetUp"))
                    {
                        setupreader.ReadToFollowing("SetUpName");
                        SetUpName = setupreader.ReadString();

                        setupreader.ReadToFollowing("PIServer");
                        PiServer = setupreader.ReadString();

                        setupreader.ReadToFollowing("InitScanDays");
                        InitScanDays = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("InitScanBatches");
                        InitScanBatches = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("NormalScanDays");
                        NormalScanDays = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("NormalScanBatches");
                        NormalScanBatches = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("PIToOracle_DateTime_FormatModel");
                        PiToOracleDateTimeFormatModel = setupreader.ReadString();

                        setupreader.ReadToFollowing("OracleDataSource");
                        OracleDataSource = setupreader.ReadString();

                        setupreader.ReadToFollowing("OracleUserID");
                        OracleUserId = setupreader.ReadString();

                        setupreader.ReadToFollowing("OraclePassword");
                        OraclePassword = setupreader.ReadString();

                        setupreader.ReadToFollowing("LogFileRootName");
                        LogFileRootName = setupreader.ReadString();

                        setupreader.ReadToFollowing("PIListXMLFileName");
                        ListXmlFileName = setupreader.ReadString();

                        setupreader.ReadToFollowing("PIListXSDFileName");
                        ListXsdFileName = setupreader.ReadString();

                        setupreader.ReadToFollowing("ScanSleepTime");
                        ScanSleepTime = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("LagTime");
                        LagTime = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("ThrottleTime");
                        Throttletime = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("RestartSleepTime");
                        RestartSleepTime = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("MaxRestartAttempts");
                        MaxRestartAttempts = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("DebugLevel");
                        DebugLevel = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("PagerLevel");
                        PagerLevel = (int)setupreader.ReadElementContentAs(typeof(Int32), null);

                        setupreader.ReadToFollowing("EmailFromAddress");
                        EmailFromAddress = setupreader.ReadString();

                        setupreader.ReadToFollowing("EmailServer");
                        EmailServer = setupreader.ReadString();

                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                msgString = string.Format("Cannot load the SetupStruct from file {0} using the SetupName {1}.", SetUpXmlFileName, SetUpServiceName);
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", string.Format("NoDateTimeStamp {0}************************************************************************{0}", Environment.NewLine));
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", msgString);
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", ex.Message);
                sc.Stop();
            }

            // Ensure the setup config file relates to the service
            if (String.Compare(SetUpServiceName, SetUpName, StringComparison.OrdinalIgnoreCase) != 0)
            {
                msgString = string.Format("Cannot load the SetupStruct from file {0} using the SetupName {1}.", SetUpXmlFileName, SetUpServiceName);
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", string.Format("NoDateTimeStamp {0}************************************************************************{0}", Environment.NewLine));
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", msgString);
                msgString = "SetUpName " + SetUpServiceName + " not found.";
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", msgString);
                sc.Stop();
            }

            // Ensure the log folder is defined
            if (Directory.Exists(LogFileRootName) == false)
            {
                msgString = string.Format("Service cannot startup using file {0} and the SetupName {1}.", SetUpXmlFileName, SetUpServiceName);
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", string.Format("NoDateTimeStamp {0}************************************************************************{0}", Environment.NewLine));
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", msgString);
                msgString = "Log file directory " + LogFileRootName + " does not exist.";
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", msgString);
                sc.Stop();
            }
        }

        /// <summary>
        ///     Validate XML list content using XSD file
        /// </summary>
        /// <param name="unitFileNm">Setup file name</param>
        /// <param name="xsdUnitFileNm"></param>
        /// <returns>True if XML setup file is valid</returns>
        internal static void ValidateListXml(String listFileNm, String xsdListFileNm)
        {
            var sc = new ServiceController(PiAdaptMrp.RunningServiceNm);

            var setupHistoryLog = string.Format("{0}SetUpHistory.log", LogFileRootName);
            
            Thread.Sleep(5000);

            if (!File.Exists(listFileNm))
            {
                var theString = string.Format("XML File \"{0}\" does not exist.", listFileNm);
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", theString);

                var errMsg = string.Format("!ExistsXML {0} is NOT Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} is NOT Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
                Thread.Sleep(5000);
                PiAdaptMrp.IsStopNow = true;
                sc.Stop();
            }

            if (!File.Exists(xsdListFileNm))
            {
                var theString = "XSD File \"" + xsdListFileNm + "\" does not exist.";
                Logs.Msg("c:\\temp\\PIAdapterFatalErrors.txt", theString);

                var errMsg = string.Format("!ExistsXSD {0} is NOT Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                var errMsg2 = string.Format("XSD File \"{0}\" does not exist.{1}", xsdListFileNm, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(DailyLog, "_DailyLog", errMsg2);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg2);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} is NOT Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("XSD File \"{0}\" does not exist.", xsdListFileNm));
                Thread.Sleep(5000);
                PiAdaptMrp.IsStopNow = true;
                sc.Stop();
            }

            // Create the XmlSchemaSet class.
            var xmlSchemaSet = new XmlSchemaSet();

            // Add the schema to the collection.
            try
            {
                xmlSchemaSet.Add("PIAdapterMRPSetup", xsdListFileNm);
            }
            catch (Exception ex)
            {
                var errMsg = string.Format("{0} is NOT Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                Logs.Msg(setupHistoryLog, ex.ToString());
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("xmlSchemaSet {0} is NOT Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
                Thread.Sleep(5000);
                PiAdaptMrp.IsStopNow = true;
                sc.Stop();
            }

            // Set the validation settings.
            var settings = new XmlReaderSettings { ValidationType = ValidationType.Schema, Schemas = xmlSchemaSet };
            settings.ValidationEventHandler += XsdValidationCallBackList;

            // Create the XmlReader object.
            var reader = XmlReader.Create(listFileNm, settings);

            // Parse the file. 
            try
            {
                while (reader.Read())
                {
                    // information generated by exception handler and ValidationEventHandler
                }
            }
            catch (Exception xmlEx)
            {
                var errMsg = string.Format("Reader {0} is NOT Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                Logs.Msg(setupHistoryLog, xmlEx.ToString());
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} is NOT Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
                Thread.Sleep(5000);
                PiAdaptMrp.IsStopNow = true;
                sc.Stop();
            }

            reader.Close();

            if (XmlFileGood)
            {
                var successMsg = string.Format("XmlFileGood {0} is Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", successMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", successMsg);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} is Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
            }
            else
            {
                var errMsg = string.Format("!XmlFileGood {0} is NOT Valid as defined by {1}.{2}", ListXmlFileName, ListXsdFileName, Environment.NewLine);
                Logs.Msg(DailyLog, "_DailyLog", "NoDateTimeStamp ");
                Logs.Msg(DailyLog, "_DailyLog", errMsg);
                Logs.Msg(Diagnostics, "_Diagnostics", "NoDateTimeStamp ");
                Logs.Msg(Diagnostics, "_Diagnostics", errMsg);
                Email.SendMsgToList(EmailDiag, EmailFromAddress, Email.EmailList, SetUpName, string.Format("{0} is NOT Valid as defined by {1}.", ListXmlFileName, ListXsdFileName));
                Thread.Sleep(5000);
                PiAdaptMrp.IsStopNow = true;
                sc.Stop();
            }
        }

        private static void XsdValidationCallBackList(object sender, ValidationEventArgs xsDe)
        {
            XmlFileGood = false;
            var theMessage = string.Format("Validation Error: {0}", xsDe.Message);

            Logs.Msg(string.Format("{0}SetUpHistory.log", LogFileRootName), theMessage);
        }

        private static void XsdValidationCallBackSetup(object sender, ValidationEventArgs xsDe)
        {
            XmlFileGood = false;
            var theMessage = string.Format("Validation Error: {0}", xsDe.Message);

            Logs.Msg(string.Format("{0}SetUpHistory.log", LogFileRootName), theMessage);
        }

        /// <summary>
        ///  Create a duplicate Unit List XML file with the ListXmlDoc content
        /// </summary>
        internal static void CreateDuplicateListXml()
        {
            var docWriter = new XmlTextWriter(string.Format("{0}{1}_Duplicate.xml", LogFileRootName, DateTime.Today.DayOfWeek), null) { Formatting = Formatting.Indented };
            Dictionary.ListXmlDoc.WriteTo(docWriter);
            docWriter.Flush();
            docWriter.Close();
        }
    }
}